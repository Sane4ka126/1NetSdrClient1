# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow helps you trigger a SonarCloud analysis of your code and populates
# GitHub Code Scanning alerts with the vulnerabilities found.
# Free for open source project.

# 1. Login to SonarCloud.io using your GitHub account

# 2. Import your project on SonarCloud
#     * Add your GitHub organization first, then add your repository as a new project.
#     * Please note that many languages are eligible for automatic analysis,
#       which means that the analysis will start automatically without the need to set up GitHub Actions.
#     * This behavior can be changed in Administration > Analysis Method.
#
# 3. Follow the SonarCloud in-product tutorial
#     * a. Copy/paste the Project Key and the Organization Key into the args parameter below
#          (You'll find this information in SonarCloud. Click on "Information" at the bottom left)
#
#     * b. Generate a new token and add it to your Github repository's secrets using the name SONAR_TOKEN
#          (On SonarCloud, click on your avatar on top-right > My account > Security
#           or go directly to https://sonarcloud.io/account/security/)

# Feel free to take a look at our documentation (https://docs.sonarcloud.io/getting-started/github/)
# or reach out to our community forum if you need some help (https://community.sonarsource.com/c/help/sc/9)
name: SonarCloud analysis

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  pull-requests: read

jobs:
  sonar-check:
    name: Sonar Check
    runs-on: windows-latest
    
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with: 
          fetch-depth: 0
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~\.sonar\cache
          key: ${{ runner.os }}-sonar-v2
          restore-keys: ${{ runner.os }}-sonar-v2
      
      - name: Clean Install SonarScanner
        run: |
          Write-Host "Removing old SonarScanner..." -ForegroundColor Yellow
          dotnet tool uninstall --global dotnet-sonarscanner 2>$null
          
          Write-Host "Cleaning cache..." -ForegroundColor Yellow
          Remove-Item -Path "$env:USERPROFILE\.dotnet\tools\.store\dotnet-sonarscanner" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path "$env:USERPROFILE\.sonar" -Recurse -Force -ErrorAction SilentlyContinue
          
          Write-Host "Installing SonarScanner..." -ForegroundColor Green
          dotnet tool install --global dotnet-sonarscanner --version 11.0.0
        shell: pwsh
      
      - name: Install Coverlet
        run: dotnet add NetSdrClientAppTests/NetSdrClientAppTests.csproj package coverlet.msbuild
      
      - name: Restore dependencies
        run: dotnet restore NetSdrClient.sln
      
      - name: SonarScanner Begin
        run: |
          dotnet sonarscanner begin `
            /k:"Sane4ka126_1NetSdrClient1" `
            /o:"sane4ka126" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.cs.opencover.reportsPaths="coverage.opencover.xml" `
            /d:sonar.coverage.exclusions="**/Program.cs,**/*Tests.cs" `
            /d:sonar.exclusions="**/bin/**,**/obj/**,**/*.yml" `
            /d:sonar.qualitygate.wait=true
        shell: pwsh
      
      - name: Build
        run: dotnet build NetSdrClient.sln -c Release --no-restore
      
      - name: Test with Coverlet
        run: |
          Write-Host "=== Running tests with Coverlet ===" -ForegroundColor Cyan
          dotnet test NetSdrClientAppTests/NetSdrClientAppTests.csproj `
            -c Release `
            --no-build `
            /p:CollectCoverage=true `
            /p:CoverletOutputFormat=opencover `
            /p:CoverletOutput="../coverage.opencover.xml" `
            /p:ExcludeByFile="**/Program.cs"
          
          if (Test-Path "coverage.opencover.xml") {
            $size = [math]::Round((Get-Item "coverage.opencover.xml").Length / 1KB, 2)
            Write-Host "`n✓ Coverage file created: coverage.opencover.xml ($size KB)" -ForegroundColor Green
            
            $xml = [xml](Get-Content "coverage.opencover.xml")
            $summary = $xml.CoverageSession.Summary
            if ($summary) {
              Write-Host "`n=== Coverage Summary ===" -ForegroundColor Cyan
              Write-Host "Line Coverage: $($summary.lineCoverage)%" -ForegroundColor White
              Write-Host "Branch Coverage: $($summary.branchCoverage)%" -ForegroundColor White
            }
          } else {
            Write-Host "`n✗ Coverage file not created!" -ForegroundColor Red
            exit 1
          }
        shell: pwsh
      
      - name: SonarScanner End
        run: dotnet sonarscanner end
        shell: pwsh
      
      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.opencover.xml
          retention-days: 5
