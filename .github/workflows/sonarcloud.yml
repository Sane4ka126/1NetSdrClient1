# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow helps you trigger a SonarCloud analysis of your code and populates
# GitHub Code Scanning alerts with the vulnerabilities found.
# Free for open source project.

# 1. Login to SonarCloud.io using your GitHub account

# 2. Import your project on SonarCloud
#     * Add your GitHub organization first, then add your repository as a new project.
#     * Please note that many languages are eligible for automatic analysis,
#       which means that the analysis will start automatically without the need to set up GitHub Actions.
#     * This behavior can be changed in Administration > Analysis Method.
#
# 3. Follow the SonarCloud in-product tutorial
#     * a. Copy/paste the Project Key and the Organization Key into the args parameter below
#          (You'll find this information in SonarCloud. Click on "Information" at the bottom left)
#
#     * b. Generate a new token and add it to your Github repository's secrets using the name SONAR_TOKEN
#          (On SonarCloud, click on your avatar on top-right > My account > Security
#           or go directly to https://sonarcloud.io/account/security/)

# Feel free to take a look at our documentation (https://docs.sonarcloud.io/getting-started/github/)
# or reach out to our community forum if you need some help (https://community.sonarsource.com/c/help/sc/9)

name: SonarCloud analysis

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  pull-requests: read

jobs:
  sonar-check:
    name: Sonar Check
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with: 
          fetch-depth: 0  # Shallow clones should be disabled for better analysis
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      
      - name: Setup Java (required by SonarScanner)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Install SonarScanner
        run: |
          dotnet tool install --global dotnet-sonarscanner
          echo "$env:USERPROFILE\.dotnet\tools" >> $env:GITHUB_PATH
        shell: pwsh
      
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~\.sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      - name: SonarScanner Begin
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          dotnet sonarscanner begin `
            /k:"Sane4ka126_1NetSdrClient1" `
            /o:"sane4ka126" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.token="${env:SONAR_TOKEN}" `
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" `
            /d:sonar.coverage.exclusions="**/Program.cs,**/*Tests.cs" `
            /d:sonar.cpd.exclusions="**/Program.cs" `
            /d:sonar.exclusions="**/bin/**,**/obj/**,**/*.yml,**/.github/**" `
            /d:sonar.qualitygate.wait=true `
            /d:sonar.qualitygate.timeout=300
        shell: pwsh
      
      - name: Restore dependencies
        run: dotnet restore NetSdrClient.sln
      
      - name: Build
        run: dotnet build NetSdrClient.sln -c Release --no-restore
      
      - name: Test with coverage
        run: |
          dotnet test NetSdrClientAppTests/NetSdrClientAppTests.csproj `
            -c Release `
            --no-build `
            --collect:"XPlat Code Coverage" `
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
        shell: pwsh
      
      - name: Find and copy coverage report
        run: |
          Write-Host "Searching for coverage files..."
          $coverageFiles = Get-ChildItem -Path "NetSdrClientAppTests/TestResults" -Filter "coverage.opencover.xml" -Recurse
          
          if ($coverageFiles) {
            foreach ($file in $coverageFiles) {
              Write-Host "Found coverage file: $($file.FullName)"
              $destPath = "NetSdrClientAppTests/TestResults/coverage.opencover.xml"
              Copy-Item $file.FullName -Destination $destPath -Force
              Write-Host "Copied to: $destPath"
              
              # Verify file exists and has content
              if (Test-Path $destPath) {
                $size = (Get-Item $destPath).Length
                Write-Host "Coverage file size: $size bytes"
              }
            }
          } else {
            Write-Host "WARNING: No coverage files found!"
            Write-Host "Contents of TestResults:"
            Get-ChildItem -Path "NetSdrClientAppTests/TestResults" -Recurse | Format-Table Name, FullName
          }
        shell: pwsh
      
      - name: SonarScanner End
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet sonarscanner end /d:sonar.token="${env:SONAR_TOKEN}"
        shell: pwsh
      
      - name: Upload coverage artifacts (for debugging)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            **/TestResults/**/*.xml
            **/coverage.*.xml
          retention-days: 5
